2024-06-24 23:43:50 [46mplatform[0m > Docker volume job log path: /tmp/workspace/11/0/logs.log
2024-06-24 23:43:50 [46mplatform[0m > Executing worker wrapper. Airbyte version: 0.63.1
2024-06-24 23:43:50 [46mplatform[0m > start sync worker. job id: 11 attempt id: 0
2024-06-24 23:43:50 [46mplatform[0m > 
2024-06-24 23:43:50 [46mplatform[0m > ----- START REPLICATION -----
2024-06-24 23:43:50 [46mplatform[0m > 
2024-06-24 23:43:50 [46mplatform[0m > Running destination...
2024-06-24 23:43:50 [46mplatform[0m > Using default value for environment variable SIDECAR_KUBE_CPU_LIMIT: '2.0'
2024-06-24 23:43:50 [46mplatform[0m > Using default value for environment variable SOCAT_KUBE_CPU_LIMIT: '2.0'
2024-06-24 23:43:50 [46mplatform[0m > Using default value for environment variable SIDECAR_KUBE_CPU_LIMIT: '2.0'
2024-06-24 23:43:50 [46mplatform[0m > Using default value for environment variable SIDECAR_KUBE_CPU_REQUEST: '0.1'
2024-06-24 23:43:50 [46mplatform[0m > Using default value for environment variable SOCAT_KUBE_CPU_LIMIT: '2.0'
2024-06-24 23:43:50 [46mplatform[0m > Using default value for environment variable SOCAT_KUBE_CPU_REQUEST: '0.1'
2024-06-24 23:43:50 [46mplatform[0m > Using default value for environment variable SIDECAR_KUBE_CPU_REQUEST: '0.1'
2024-06-24 23:43:50 [46mplatform[0m > Using default value for environment variable SOCAT_KUBE_CPU_REQUEST: '0.1'
2024-06-24 23:43:50 [46mplatform[0m > Checking if airbyte/source-file:0.5.2 exists...
2024-06-24 23:43:50 [46mplatform[0m > Checking if airbyte/destination-postgres:2.0.12 exists...
2024-06-24 23:43:50 [46mplatform[0m > airbyte/source-file:0.5.2 was found locally.
2024-06-24 23:43:50 [46mplatform[0m > Creating docker container = source-file-read-11-0-uryww with resources io.airbyte.config.ResourceRequirements@2b7bab48[cpuRequest=0.5,cpuLimit=1,memoryRequest=1Gi,memoryLimit=2Gi,additionalProperties={}] and allowedHosts io.airbyte.config.AllowedHosts@f663979[hosts=[*, *.datadoghq.com, *.datadoghq.eu, *.sentry.io],additionalProperties={}]
2024-06-24 23:43:50 [46mplatform[0m > Preparing command: docker run --rm --init -i -w /data/11/0 --log-driver none --name source-file-read-11-0-uryww -e CONCURRENT_SOURCE_STREAM_READ=false --network host -v airbyte_workspace:/data -v oss_local_root:/local -e DEPLOYMENT_MODE=OSS -e WORKER_CONNECTOR_IMAGE=airbyte/source-file:0.5.2 -e AUTO_DETECT_SCHEMA=true -e LAUNCHDARKLY_KEY= -e SOCAT_KUBE_CPU_REQUEST=0.1 -e SOCAT_KUBE_CPU_LIMIT=2.0 -e FIELD_SELECTION_WORKSPACES= -e USE_STREAM_CAPABLE_STATE=true -e WORKER_ENVIRONMENT=DOCKER -e AIRBYTE_ROLE=dev -e APPLY_FIELD_SELECTION=false -e WORKER_JOB_ATTEMPT=0 -e OTEL_COLLECTOR_ENDPOINT=http://host.docker.internal:4317 -e FEATURE_FLAG_CLIENT=config -e AIRBYTE_VERSION=0.63.1 -e WORKER_JOB_ID=11 --cpus=1 --memory-reservation=1Gi --memory=2Gi airbyte/source-file:0.5.2 read --config source_config.json --catalog source_catalog.json
2024-06-24 23:43:50 [46mplatform[0m > airbyte/destination-postgres:2.0.12 was found locally.
2024-06-24 23:43:50 [46mplatform[0m > Creating docker container = destination-postgres-write-11-0-kssav with resources io.airbyte.config.ResourceRequirements@2f66cc49[cpuRequest=0.5,cpuLimit=1,memoryRequest=1Gi,memoryLimit=2Gi,additionalProperties={}] and allowedHosts null
2024-06-24 23:43:50 [46mplatform[0m > Preparing command: docker run --rm --init -i -w /data/11/0 --log-driver none --name destination-postgres-write-11-0-kssav --network host -v airbyte_workspace:/data -v oss_local_root:/local -e DEPLOYMENT_MODE=OSS -e WORKER_CONNECTOR_IMAGE=airbyte/destination-postgres:2.0.12 -e AUTO_DETECT_SCHEMA=true -e LAUNCHDARKLY_KEY= -e SOCAT_KUBE_CPU_REQUEST=0.1 -e SOCAT_KUBE_CPU_LIMIT=2.0 -e FIELD_SELECTION_WORKSPACES= -e USE_STREAM_CAPABLE_STATE=true -e WORKER_ENVIRONMENT=DOCKER -e AIRBYTE_ROLE=dev -e APPLY_FIELD_SELECTION=false -e WORKER_JOB_ATTEMPT=0 -e OTEL_COLLECTOR_ENDPOINT=http://host.docker.internal:4317 -e FEATURE_FLAG_CLIENT=config -e AIRBYTE_VERSION=0.63.1 -e WORKER_JOB_ID=11 --cpus=1 --memory-reservation=1Gi --memory=2Gi airbyte/destination-postgres:2.0.12 write --config destination_config.json --catalog destination_catalog.json
2024-06-24 23:43:50 [46mplatform[0m > Reading messages from protocol version 0.2.0
2024-06-24 23:43:50 [46mplatform[0m > Writing messages to protocol version 0.2.0
2024-06-24 23:43:50 [46mplatform[0m > Reading messages from protocol version 0.2.0
2024-06-24 23:43:50 [46mplatform[0m > readFromSource: start
2024-06-24 23:43:50 [46mplatform[0m > Starting source heartbeat check. Will check threshold of 10800 seconds, every 1 minutes.
2024-06-24 23:43:50 [46mplatform[0m > processMessage: start
2024-06-24 23:43:50 [46mplatform[0m > writeToDestination: start
2024-06-24 23:43:50 [46mplatform[0m > readFromDestination: start
2024-06-24 23:43:50 [44msource[0m > WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
2024-06-24 23:43:50 [43mdestination[0m > WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
2024-06-24 23:44:01 [43mdestination[0m > INFO main i.a.i.d.p.PostgresDestination$Companion(main):210 starting destination: class io.airbyte.integrations.destination.postgres.PostgresDestination
2024-06-24 23:44:03 [43mdestination[0m > INFO main i.a.c.i.b.IntegrationCliParser$Companion(parseOptions):144 integration args: {catalog=destination_catalog.json, write=null, config=destination_config.json}
2024-06-24 23:44:03 [43mdestination[0m > INFO main i.a.c.i.b.IntegrationRunner(runInternal):124 Running integration: io.airbyte.cdk.integrations.base.ssh.SshWrappedDestination
2024-06-24 23:44:03 [43mdestination[0m > INFO main i.a.c.i.b.IntegrationRunner(runInternal):125 Command: WRITE
2024-06-24 23:44:03 [43mdestination[0m > INFO main i.a.c.i.b.IntegrationRunner(runInternal):126 Integration config: IntegrationConfig{command=WRITE, configPath='destination_config.json', catalogPath='destination_catalog.json', statePath='null'}
2024-06-24 23:44:04 [43mdestination[0m > WARN main c.n.s.JsonMetaSchema(newValidator):278 Unknown keyword order - you should define your own Meta Schema. If the keyword is irrelevant for validation, just use a NonValidationKeyword
2024-06-24 23:44:04 [43mdestination[0m > WARN main c.n.s.JsonMetaSchema(newValidator):278 Unknown keyword airbyte_secret - you should define your own Meta Schema. If the keyword is irrelevant for validation, just use a NonValidationKeyword
2024-06-24 23:44:04 [43mdestination[0m > INFO main i.a.c.i.b.s.SshWrappedDestination(getSerializedMessageConsumer):112 No SSH connection options found, using defaults
2024-06-24 23:44:04 [43mdestination[0m > INFO main i.a.c.i.b.s.SshTunnel$Companion(getInstance):423 Starting connection with method: NO_TUNNEL
2024-06-24 23:44:04 [43mdestination[0m > INFO main c.z.h.HikariDataSource(<init>):79 HikariPool-1 - Starting...
2024-06-24 23:44:04 [43mdestination[0m > INFO main c.z.h.HikariDataSource(<init>):81 HikariPool-1 - Start completed.
2024-06-24 23:44:08 [43mdestination[0m > INFO main i.a.i.b.d.t.CatalogParser(parseCatalog):106 Running sync with stream configs: [StreamConfig(id=StreamId(finalNamespace=raw, finalName=ozon_sales, rawNamespace=airbyte_internal, rawName=raw_raw__stream_ozon_sales, originalNamespace=raw, originalName=ozon_sales), destinationSyncMode=overwrite, primaryKey=[], cursor=Optional.empty, columns={ColumnId(name=SKU, originalName=SKU, canonicalName=SKU)=NUMBER, ColumnId(name=URL, originalName=URL, canonicalName=URL)=STRING, ColumnId(name=Name, originalName=Name, canonicalName=Name)=STRING, ColumnId(name=Brand, originalName=Brand, canonicalName=Brand)=STRING, ColumnId(name=Photo, originalName=Photo, canonicalName=Photo)=STRING, ColumnId(name=Price, originalName=Price, canonicalName=Price)=NUMBER, ColumnId(name=Sales, originalName=Sales, canonicalName=Sales)=NUMBER, ColumnId(name=Rating, originalName=Rating, canonicalName=Rating)=STRING, ColumnId(name=Seller, originalName=Seller, canonicalName=Seller)=STRING, ColumnId(name=Balance, originalName=Balance, canonicalName=Balance)=NUMBER, ColumnId(name=Revenue, originalName=Revenue, canonicalName=Revenue)=NUMBER, ColumnId(name=Category, originalName=Category, canonicalName=Category)=STRING, ColumnId(name=Comments, originalName=Comments, canonicalName=Comments)=NUMBER, ColumnId(name=Max_price, originalName=Max price, canonicalName=Max_price)=NUMBER, ColumnId(name=Min_price, originalName=Min price, canonicalName=Min_price)=NUMBER, ColumnId(name=Lost_profit, originalName=Lost profit, canonicalName=Lost_profit)=NUMBER, ColumnId(name=Unnamed__22, originalName=Unnamed: 22, canonicalName=Unnamed__22)=NUMBER, ColumnId(name=Average_price, originalName=Average price, canonicalName=Average_price)=NUMBER, ColumnId(name=Days_in_stock, originalName=Days in stock, canonicalName=Days_in_stock)=NUMBER, ColumnId(name=full_category, originalName=full_category, canonicalName=full_category)=STRING, ColumnId(name=Deliveryscheme, originalName=Deliveryscheme, canonicalName=Deliveryscheme)=STRING, ColumnId(name=Days_with_sales, originalName=Days with sales, canonicalName=Days_with_sales)=NUMBER, ColumnId(name=Revenue_potential, originalName=Revenue potential, canonicalName=Revenue_potential)=NUMBER, ColumnId(name=Average_if_in_stock, originalName=Average if in stock, canonicalName=Average_if_in_stock)=NUMBER}, generationId=0, minimumGenerationId=0, syncId=0)]
2024-06-24 23:44:09 [43mdestination[0m > INFO main i.a.c.i.d.a.b.BufferManager(<init>):43 Max 'memory' available for buffer allocation 296 MB
2024-06-24 23:44:10 [43mdestination[0m > INFO pool-3-thread-1 i.a.c.i.d.a.b.BufferManager(printQueueInfo):89 [ASYNC QUEUE INFO] Global: max: 296.96 MB, allocated: 10 MB (10.0 MB), %% used: 0.03367428551701215 | State Manager memory usage: Allocated: 10 MB, Used: 0 bytes, percentage Used 0.0
2024-06-24 23:44:10 [43mdestination[0m > INFO main i.a.c.i.b.IntegrationRunner$Companion(consumeWriteStream$io_airbyte_airbyte_cdk_java_airbyte_cdk_airbyte_cdk_core):422 Starting buffered read of input stream
2024-06-24 23:44:10 [43mdestination[0m > INFO main i.a.c.i.d.a.FlushWorkers(start):73 Start async buffer supervisor
2024-06-24 23:44:10 [43mdestination[0m > INFO main i.a.c.i.d.a.AsyncStreamConsumer(start):111 class io.airbyte.cdk.integrations.destination.async.AsyncStreamConsumer started.
2024-06-24 23:44:10 [43mdestination[0m > INFO pool-6-thread-1 i.a.c.i.d.a.FlushWorkers(printWorkerInfo):127 [ASYNC WORKER INFO] Pool queue size: 0, Active threads: 0
2024-06-24 23:44:10 [43mdestination[0m > INFO main i.a.c.i.d.j.t.JdbcDestinationHandler(execute):163 Executing sql 8731adcd-e4b7-4816-b46b-944a46262623-38473965-8746-4497-bb3a-74ddcac9ce36: [create schema if not exists "airbyte_internal";]
[create schema if not exists "raw";]
2024-06-24 23:44:11 [43mdestination[0m > INFO main i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):46 executing query within transaction: create schema if not exists "airbyte_internal";
2024-06-24 23:44:11 [43mdestination[0m > INFO main i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):48 done executing query within transaction: create schema if not exists "airbyte_internal";
2024-06-24 23:44:11 [43mdestination[0m > INFO main i.a.c.i.d.j.t.JdbcDestinationHandler(execute):175 Sql 8731adcd-e4b7-4816-b46b-944a46262623-38473965-8746-4497-bb3a-74ddcac9ce36 completed in 1239 ms
2024-06-24 23:44:11 [43mdestination[0m > INFO main i.a.c.i.d.j.t.JdbcDestinationHandler(execute):163 Executing sql 8731adcd-e4b7-4816-b46b-944a46262623-6d46b568-24e0-427a-bdd5-0469e540192c: [create schema if not exists "airbyte_internal";]
[create schema if not exists "raw";]
2024-06-24 23:44:11 [43mdestination[0m > INFO main i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):46 executing query within transaction: create schema if not exists "raw";
2024-06-24 23:44:11 [43mdestination[0m > INFO main i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):48 done executing query within transaction: create schema if not exists "raw";
2024-06-24 23:44:11 [43mdestination[0m > INFO main i.a.c.i.d.j.t.JdbcDestinationHandler(execute):175 Sql 8731adcd-e4b7-4816-b46b-944a46262623-6d46b568-24e0-427a-bdd5-0469e540192c completed in 25 ms
2024-06-24 23:44:11 [43mdestination[0m > INFO type-and-dedupe i.a.i.b.d.t.BaseDestinationV1V2Migrator(migrateIfNecessary):20 Assessing whether migration is necessary for stream ozon_sales
2024-06-24 23:44:11 [43mdestination[0m > INFO type-and-dedupe i.a.i.b.d.t.BaseDestinationV1V2Migrator(shouldMigrate):44 Checking whether v1 raw table _airbyte_raw_ozon_sales in dataset raw exists
2024-06-24 23:44:11 [43mdestination[0m > INFO type-and-dedupe i.a.c.i.d.j.t.JdbcDestinationHandler$Companion(findExistingTable$lambda$1):502 Retrieving existing columns for analytics.airbyte_internal.raw_raw__stream_ozon_sales
2024-06-24 23:44:11 [43mdestination[0m > INFO type-and-dedupe i.a.c.i.d.j.t.JdbcDestinationHandler$Companion(findExistingTable$lambda$1):502 Retrieving existing columns for analytics.raw._airbyte_raw_ozon_sales
2024-06-24 23:44:11 [43mdestination[0m > INFO type-and-dedupe i.a.i.b.d.t.BaseDestinationV1V2Migrator(shouldMigrate):52 Migration Info: Required for Sync mode: false, No existing v2 raw tables: false, A v1 raw table exists: false
2024-06-24 23:44:11 [43mdestination[0m > INFO type-and-dedupe i.a.i.b.d.t.BaseDestinationV1V2Migrator(migrateIfNecessary):31 No Migration Required for stream: ozon_sales
2024-06-24 23:44:12 [43mdestination[0m > INFO Thread-0 i.a.c.d.j.DefaultJdbcDatabase(unsafeQuery$lambda$6):126 closing connection
2024-06-24 23:44:12 [43mdestination[0m > INFO Thread-0 i.a.c.i.d.j.t.JdbcDestinationHandler$Companion(findExistingTable$lambda$1):502 Retrieving existing columns for analytics.raw.ozon_sales
2024-06-24 23:44:12 [43mdestination[0m > INFO Thread-0 i.a.c.d.j.DefaultJdbcDatabase(unsafeQuery$lambda$6):126 closing connection
2024-06-24 23:44:12 [43mdestination[0m > INFO Thread-0 i.a.c.i.d.j.t.JdbcDestinationHandler(getInitialRawTableState$lambda$1):87 Retrieving table from Db metadata: analytics airbyte_internal raw_raw__stream_ozon_sales
2024-06-24 23:44:12 [43mdestination[0m > INFO Thread-0 i.a.c.d.j.DefaultJdbcDatabase(unsafeQuery$lambda$6):126 closing connection
2024-06-24 23:44:12 [43mdestination[0m > INFO Thread-0 i.a.c.d.j.DefaultJdbcDatabase(unsafeQuery$lambda$6):126 closing connection
2024-06-24 23:44:12 [43mdestination[0m > INFO type-and-dedupe i.a.i.b.d.t.TyperDeduperUtil(runMigrationsAsync$lambda$12):165 Maybe executing PostgresRawTableAirbyteMetaMigration migration for stream raw.ozon_sales.
2024-06-24 23:44:12 [43mdestination[0m > INFO type-and-dedupe i.a.c.i.d.j.t.JdbcDestinationHandler$Companion(findExistingTable$lambda$1):502 Retrieving existing columns for analytics.airbyte_internal.raw_raw__stream_ozon_sales
2024-06-24 23:44:13 [43mdestination[0m > INFO main i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):46 executing query within transaction: delete from "airbyte_internal"."_airbyte_destination_state" where ("name" = 'ozon_sales' and "namespace" = 'raw')
2024-06-24 23:44:13 [43mdestination[0m > INFO main i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):48 done executing query within transaction: delete from "airbyte_internal"."_airbyte_destination_state" where ("name" = 'ozon_sales' and "namespace" = 'raw')
2024-06-24 23:44:13 [43mdestination[0m > INFO main i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):46 executing query within transaction: insert into "airbyte_internal"."_airbyte_destination_state" ("name", "namespace", "destination_state", "updated_at") values ('ozon_sales', 'raw', '{"needsSoftReset":false,"airbyteMetaPresentInRaw":true}', '2024-06-24T23:44:13.115815036Z')
2024-06-24 23:44:13 [43mdestination[0m > INFO main i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):48 done executing query within transaction: insert into "airbyte_internal"."_airbyte_destination_state" ("name", "namespace", "destination_state", "updated_at") values ('ozon_sales', 'raw', '{"needsSoftReset":false,"airbyteMetaPresentInRaw":true}', '2024-06-24T23:44:13.115815036Z')
2024-06-24 23:44:13 [43mdestination[0m > INFO main i.a.c.i.d.j.JdbcBufferedConsumerFactory(onStartFunction$lambda$4):233 Preparing raw tables in destination started for 1 streams
2024-06-24 23:44:13 [43mdestination[0m > INFO main i.a.c.i.d.j.JdbcBufferedConsumerFactory(onStartFunction$lambda$4):240 Preparing raw table in destination started for stream ozon_sales. schema: airbyte_internal, table name: raw_raw__stream_ozon_sales
2024-06-24 23:44:13 [43mdestination[0m > INFO main i.a.c.i.d.j.JdbcBufferedConsumerFactory(onStartFunction$lambda$4):259 Preparing raw tables in destination completed.
2024-06-24 23:44:13 [43mdestination[0m > INFO main i.a.i.b.d.t.DefaultTyperDeduper(prepareFinalTables):121 Preparing tables
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.i.b.d.t.DefaultTyperDeduper(prepareTablesFuture$lambda$4):154 Final Table exists for stream ozon_sales
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.c.i.d.j.t.JdbcDestinationHandler(execute):163 Executing sql 03579c2c-dd96-43fc-80bf-2ef21448c6a2-789804c9-e05f-4b5e-8ed2-d6ca9ff8f7b7: [drop table if exists "raw"."ozon_sales_airbyte_tmp";, create table "raw"."ozon_sales_airbyte_tmp" ("SKU" decimal(38, 9), "URL" varchar, "Name" varchar, "Brand" varchar, "Photo" varchar, "Price" decimal(38, 9), "Sales" decimal(38, 9), "Rating" varchar, "Seller" varchar, "Balance" decimal(38, 9), "Revenue" decimal(38, 9), "Category" varchar, "Comments" decimal(38, 9), "Max_price" decimal(38, 9), "Min_price" decimal(38, 9), "Lost_profit" decimal(38, 9), "Unnamed__22" decimal(38, 9), "Average_price" decimal(38, 9), "Days_in_stock" decimal(38, 9), "full_category" varchar, "Deliveryscheme" varchar, "Days_with_sales" decimal(38, 9), "Revenue_potential" decimal(38, 9), "Average_if_in_stock" decimal(38, 9), "_airbyte_raw_id" varchar(36) not null, "_airbyte_extracted_at" timestamp with time zone not null, "_airbyte_meta" jsonb not null);]
[create index on "raw"."ozon_sales_airbyte_tmp"("_airbyte_extracted_at");]
[create index on "raw"."ozon_sales_airbyte_tmp"("_airbyte_raw_id");]
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):46 executing query within transaction: drop table if exists "raw"."ozon_sales_airbyte_tmp";
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):48 done executing query within transaction: drop table if exists "raw"."ozon_sales_airbyte_tmp";
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):46 executing query within transaction: create table "raw"."ozon_sales_airbyte_tmp" ("SKU" decimal(38, 9), "URL" varchar, "Name" varchar, "Brand" varchar, "Photo" varchar, "Price" decimal(38, 9), "Sales" decimal(38, 9), "Rating" varchar, "Seller" varchar, "Balance" decimal(38, 9), "Revenue" decimal(38, 9), "Category" varchar, "Comments" decimal(38, 9), "Max_price" decimal(38, 9), "Min_price" decimal(38, 9), "Lost_profit" decimal(38, 9), "Unnamed__22" decimal(38, 9), "Average_price" decimal(38, 9), "Days_in_stock" decimal(38, 9), "full_category" varchar, "Deliveryscheme" varchar, "Days_with_sales" decimal(38, 9), "Revenue_potential" decimal(38, 9), "Average_if_in_stock" decimal(38, 9), "_airbyte_raw_id" varchar(36) not null, "_airbyte_extracted_at" timestamp with time zone not null, "_airbyte_meta" jsonb not null);
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):48 done executing query within transaction: create table "raw"."ozon_sales_airbyte_tmp" ("SKU" decimal(38, 9), "URL" varchar, "Name" varchar, "Brand" varchar, "Photo" varchar, "Price" decimal(38, 9), "Sales" decimal(38, 9), "Rating" varchar, "Seller" varchar, "Balance" decimal(38, 9), "Revenue" decimal(38, 9), "Category" varchar, "Comments" decimal(38, 9), "Max_price" decimal(38, 9), "Min_price" decimal(38, 9), "Lost_profit" decimal(38, 9), "Unnamed__22" decimal(38, 9), "Average_price" decimal(38, 9), "Days_in_stock" decimal(38, 9), "full_category" varchar, "Deliveryscheme" varchar, "Days_with_sales" decimal(38, 9), "Revenue_potential" decimal(38, 9), "Average_if_in_stock" decimal(38, 9), "_airbyte_raw_id" varchar(36) not null, "_airbyte_extracted_at" timestamp with time zone not null, "_airbyte_meta" jsonb not null);
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.c.i.d.j.t.JdbcDestinationHandler(execute):175 Sql 03579c2c-dd96-43fc-80bf-2ef21448c6a2-789804c9-e05f-4b5e-8ed2-d6ca9ff8f7b7 completed in 61 ms
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.c.i.d.j.t.JdbcDestinationHandler(execute):163 Executing sql 03579c2c-dd96-43fc-80bf-2ef21448c6a2-77a90afb-4a4c-49f7-83bf-b329f752b556: [drop table if exists "raw"."ozon_sales_airbyte_tmp";, create table "raw"."ozon_sales_airbyte_tmp" ("SKU" decimal(38, 9), "URL" varchar, "Name" varchar, "Brand" varchar, "Photo" varchar, "Price" decimal(38, 9), "Sales" decimal(38, 9), "Rating" varchar, "Seller" varchar, "Balance" decimal(38, 9), "Revenue" decimal(38, 9), "Category" varchar, "Comments" decimal(38, 9), "Max_price" decimal(38, 9), "Min_price" decimal(38, 9), "Lost_profit" decimal(38, 9), "Unnamed__22" decimal(38, 9), "Average_price" decimal(38, 9), "Days_in_stock" decimal(38, 9), "full_category" varchar, "Deliveryscheme" varchar, "Days_with_sales" decimal(38, 9), "Revenue_potential" decimal(38, 9), "Average_if_in_stock" decimal(38, 9), "_airbyte_raw_id" varchar(36) not null, "_airbyte_extracted_at" timestamp with time zone not null, "_airbyte_meta" jsonb not null);]
[create index on "raw"."ozon_sales_airbyte_tmp"("_airbyte_extracted_at");]
[create index on "raw"."ozon_sales_airbyte_tmp"("_airbyte_raw_id");]
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):46 executing query within transaction: create index on "raw"."ozon_sales_airbyte_tmp"("_airbyte_extracted_at");
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):48 done executing query within transaction: create index on "raw"."ozon_sales_airbyte_tmp"("_airbyte_extracted_at");
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.c.i.d.j.t.JdbcDestinationHandler(execute):175 Sql 03579c2c-dd96-43fc-80bf-2ef21448c6a2-77a90afb-4a4c-49f7-83bf-b329f752b556 completed in 39 ms
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.c.i.d.j.t.JdbcDestinationHandler(execute):163 Executing sql 03579c2c-dd96-43fc-80bf-2ef21448c6a2-a441925e-c131-4477-8468-078de5dcc6ab: [drop table if exists "raw"."ozon_sales_airbyte_tmp";, create table "raw"."ozon_sales_airbyte_tmp" ("SKU" decimal(38, 9), "URL" varchar, "Name" varchar, "Brand" varchar, "Photo" varchar, "Price" decimal(38, 9), "Sales" decimal(38, 9), "Rating" varchar, "Seller" varchar, "Balance" decimal(38, 9), "Revenue" decimal(38, 9), "Category" varchar, "Comments" decimal(38, 9), "Max_price" decimal(38, 9), "Min_price" decimal(38, 9), "Lost_profit" decimal(38, 9), "Unnamed__22" decimal(38, 9), "Average_price" decimal(38, 9), "Days_in_stock" decimal(38, 9), "full_category" varchar, "Deliveryscheme" varchar, "Days_with_sales" decimal(38, 9), "Revenue_potential" decimal(38, 9), "Average_if_in_stock" decimal(38, 9), "_airbyte_raw_id" varchar(36) not null, "_airbyte_extracted_at" timestamp with time zone not null, "_airbyte_meta" jsonb not null);]
[create index on "raw"."ozon_sales_airbyte_tmp"("_airbyte_extracted_at");]
[create index on "raw"."ozon_sales_airbyte_tmp"("_airbyte_raw_id");]
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):46 executing query within transaction: create index on "raw"."ozon_sales_airbyte_tmp"("_airbyte_raw_id");
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):48 done executing query within transaction: create index on "raw"."ozon_sales_airbyte_tmp"("_airbyte_raw_id");
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.c.i.d.j.t.JdbcDestinationHandler(execute):175 Sql 03579c2c-dd96-43fc-80bf-2ef21448c6a2-a441925e-c131-4477-8468-078de5dcc6ab completed in 36 ms
2024-06-24 23:44:13 [43mdestination[0m > INFO type-and-dedupe i.a.i.b.d.t.DefaultTyperDeduper(prepareTablesFuture$lambda$4):171 Using temp final table for stream ozon_sales, will overwrite existing table at end of sync
2024-06-24 23:44:13 [43mdestination[0m > INFO main i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):46 executing query within transaction: delete from "airbyte_internal"."_airbyte_destination_state" where ("name" = 'ozon_sales' and "namespace" = 'raw')
2024-06-24 23:44:13 [43mdestination[0m > INFO main i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):48 done executing query within transaction: delete from "airbyte_internal"."_airbyte_destination_state" where ("name" = 'ozon_sales' and "namespace" = 'raw')
2024-06-24 23:44:13 [43mdestination[0m > INFO main i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):46 executing query within transaction: insert into "airbyte_internal"."_airbyte_destination_state" ("name", "namespace", "destination_state", "updated_at") values ('ozon_sales', 'raw', '{"needsSoftReset":false,"airbyteMetaPresentInRaw":true}', '2024-06-24T23:44:13.501954440Z')
2024-06-24 23:44:13 [43mdestination[0m > INFO main i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):48 done executing query within transaction: insert into "airbyte_internal"."_airbyte_destination_state" ("name", "namespace", "destination_state", "updated_at") values ('ozon_sales', 'raw', '{"needsSoftReset":false,"airbyteMetaPresentInRaw":true}', '2024-06-24T23:44:13.501954440Z')
2024-06-24 23:44:28 [44msource[0m > Syncing stream: ozon_sales (https://drive.google.com/uc?export=download&id=1_QKC078dUz_o2zXbI5vqDXyDFTH8GD_M)...
2024-06-24 23:44:28 [44msource[0m > TransportParams: None
2024-06-24 23:44:28 [46mplatform[0m > Stream status TRACE received of status: STARTED for stream ozon_sales
2024-06-24 23:44:28 [46mplatform[0m > Sending update for ozon_sales - null -> RUNNING
2024-06-24 23:44:28 [46mplatform[0m > Stream Status Update Received: ozon_sales - RUNNING
2024-06-24 23:44:28 [46mplatform[0m > Creating status: ozon_sales - RUNNING
2024-06-24 23:44:32 [44msource[0m > Marking stream ozon_sales as RUNNING
2024-06-24 23:44:33 [46mplatform[0m > Stream status TRACE received of status: RUNNING for stream ozon_sales
2024-06-24 23:44:35 [46mplatform[0m > Records read: 5000 (3 MB)
2024-06-24 23:44:38 [46mplatform[0m > Records read: 10000 (7 MB)
2024-06-24 23:44:41 [46mplatform[0m > Records read: 15000 (11 MB)
2024-06-24 23:44:43 [46mplatform[0m > Records read: 20000 (15 MB)
2024-06-24 23:44:46 [43mdestination[0m > INFO pool-5-thread-1 i.a.c.i.d.a.DetectStreamToFlush(getNextStreamToFlush):109 flushing: trigger info: raw - ozon_sales, time trigger: false , size trigger: true current threshold b: 25 MB, queue size b: 26.58 MB, penalty b: 0 bytes, after penalty b: 26.58 MB
2024-06-24 23:44:46 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):135 Flush Worker (dc61f) -- Worker picked up work.
2024-06-24 23:44:46 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):141 Flush Worker (dc61f) -- Attempting to read from queue namespace: raw, stream: ozon_sales.
2024-06-24 23:44:46 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):159 Flush Worker (dc61f) -- Batch contains: 22334 records, 25 MB bytes.
2024-06-24 23:44:46 [46mplatform[0m > Records read: 25000 (18 MB)
2024-06-24 23:44:49 [46mplatform[0m > Records read: 30000 (22 MB)
2024-06-24 23:44:51 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.s.GlobalAsyncStateManager(flushStates):155 Flushing states
2024-06-24 23:44:51 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.s.GlobalAsyncStateManager(flushStates):209 Flushing states complete
2024-06-24 23:44:51 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.GlobalMemoryManager(free):78 Freeing 0 bytes..
2024-06-24 23:44:51 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.GlobalMemoryManager(free):78 Freeing 26213309 bytes..
2024-06-24 23:44:51 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):170 Flush Worker (dc61f) -- Worker finished flushing. Current queue size: 10906
2024-06-24 23:44:52 [46mplatform[0m > Records read: 35000 (26 MB)
2024-06-24 23:44:55 [46mplatform[0m > Records read: 40000 (30 MB)
2024-06-24 23:44:58 [43mdestination[0m > INFO pool-5-thread-1 i.a.c.i.d.a.DetectStreamToFlush(getNextStreamToFlush):109 flushing: trigger info: raw - ozon_sales, time trigger: false , size trigger: true current threshold b: 25 MB, queue size b: 25.25 MB, penalty b: 0 bytes, after penalty b: 25.25 MB
2024-06-24 23:44:58 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):135 Flush Worker (28b1e) -- Worker picked up work.
2024-06-24 23:44:58 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):141 Flush Worker (28b1e) -- Attempting to read from queue namespace: raw, stream: ozon_sales.
2024-06-24 23:44:58 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):159 Flush Worker (28b1e) -- Batch contains: 21986 records, 25 MB bytes.
2024-06-24 23:44:58 [46mplatform[0m > Records read: 45000 (33 MB)
2024-06-24 23:45:01 [46mplatform[0m > Records read: 50000 (37 MB)
2024-06-24 23:45:04 [46mplatform[0m > Records read: 55000 (41 MB)
2024-06-24 23:45:04 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.s.GlobalAsyncStateManager(flushStates):155 Flushing states
2024-06-24 23:45:04 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.s.GlobalAsyncStateManager(flushStates):209 Flushing states complete
2024-06-24 23:45:04 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.GlobalMemoryManager(free):78 Freeing 0 bytes..
2024-06-24 23:45:04 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.GlobalMemoryManager(free):78 Freeing 26213888 bytes..
2024-06-24 23:45:04 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):170 Flush Worker (28b1e) -- Worker finished flushing. Current queue size: 11831
2024-06-24 23:45:06 [46mplatform[0m > Records read: 60000 (44 MB)
2024-06-24 23:45:09 [46mplatform[0m > Records read: 65000 (48 MB)
2024-06-24 23:45:09 [43mdestination[0m > INFO pool-3-thread-1 i.a.c.i.d.a.b.BufferManager(printQueueInfo):89 [ASYNC QUEUE INFO] Global: max: 296.96 MB, allocated: 40 MB (40.0015287399292 MB), %% used: 0.1347022899905343 | Queue `ozon_sales`, num records: 21298, num bytes: 23.4 MB, allocated bytes: 30 MB | State Manager memory usage: Allocated: 10 MB, Used: 0 bytes, percentage Used 0.0
2024-06-24 23:45:10 [43mdestination[0m > INFO pool-6-thread-1 i.a.c.i.d.a.FlushWorkers(printWorkerInfo):127 [ASYNC WORKER INFO] Pool queue size: 0, Active threads: 0
2024-06-24 23:45:11 [43mdestination[0m > INFO pool-5-thread-1 i.a.c.i.d.a.DetectStreamToFlush(getNextStreamToFlush):109 flushing: trigger info: raw - ozon_sales, time trigger: false , size trigger: true current threshold b: 25 MB, queue size b: 25.83 MB, penalty b: 0 bytes, after penalty b: 25.83 MB
2024-06-24 23:45:11 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):135 Flush Worker (36a48) -- Worker picked up work.
2024-06-24 23:45:11 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):141 Flush Worker (36a48) -- Attempting to read from queue namespace: raw, stream: ozon_sales.
2024-06-24 23:45:11 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):159 Flush Worker (36a48) -- Batch contains: 22749 records, 25 MB bytes.
2024-06-24 23:45:12 [46mplatform[0m > Records read: 70000 (51 MB)
2024-06-24 23:45:14 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.s.GlobalAsyncStateManager(flushStates):155 Flushing states
2024-06-24 23:45:14 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.s.GlobalAsyncStateManager(flushStates):209 Flushing states complete
2024-06-24 23:45:14 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.GlobalMemoryManager(free):78 Freeing 0 bytes..
2024-06-24 23:45:14 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.GlobalMemoryManager(free):78 Freeing 26213368 bytes..
2024-06-24 23:45:14 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):170 Flush Worker (36a48) -- Worker finished flushing. Current queue size: 4248
2024-06-24 23:45:16 [46mplatform[0m > Records read: 75000 (55 MB)
2024-06-24 23:45:19 [46mplatform[0m > Records read: 80000 (59 MB)
2024-06-24 23:45:22 [46mplatform[0m > Records read: 85000 (62 MB)
2024-06-24 23:45:25 [43mdestination[0m > INFO pool-5-thread-1 i.a.c.i.d.a.DetectStreamToFlush(getNextStreamToFlush):109 flushing: trigger info: raw - ozon_sales, time trigger: false , size trigger: true current threshold b: 25 MB, queue size b: 25.1 MB, penalty b: 0 bytes, after penalty b: 25.1 MB
2024-06-24 23:45:25 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):135 Flush Worker (2e5f9) -- Worker picked up work.
2024-06-24 23:45:25 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):141 Flush Worker (2e5f9) -- Attempting to read from queue namespace: raw, stream: ozon_sales.
2024-06-24 23:45:25 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):159 Flush Worker (2e5f9) -- Batch contains: 22775 records, 25 MB bytes.
2024-06-24 23:45:25 [46mplatform[0m > Records read: 90000 (66 MB)
2024-06-24 23:45:26 [44msource[0m > Marking stream ozon_sales as STOPPED
2024-06-24 23:45:26 [46mplatform[0m > Stream status TRACE received of status: COMPLETE for stream ozon_sales
2024-06-24 23:45:26 [46mplatform[0m > Total records read: 91559 (67 MB)
2024-06-24 23:45:26 [46mplatform[0m > Schema validation was performed to a max of 10 records with errors per stream.
2024-06-24 23:45:26 [46mplatform[0m > readFromSource: done. (source.isFinished:true, fromSource.isClosed:false)
2024-06-24 23:45:26 [46mplatform[0m > thread status... heartbeat thread: false , replication thread: true
2024-06-24 23:45:26 [46mplatform[0m > processMessage: done. (fromSource.isDone:true, forDest.isClosed:false)
2024-06-24 23:45:26 [46mplatform[0m > writeToDestination: done. (forDest.isDone:true, isDestRunning:true)
2024-06-24 23:45:26 [46mplatform[0m > thread status... timeout thread: false , replication thread: true
2024-06-24 23:45:26 [43mdestination[0m > INFO main i.a.c.i.b.IntegrationRunner$Companion(consumeWriteStream$io_airbyte_airbyte_cdk_java_airbyte_cdk_airbyte_cdk_core):444 Finished buffered read of input stream
2024-06-24 23:45:26 [43mdestination[0m > INFO main i.a.c.i.d.a.FlushWorkers(close):193 Closing flush workers -- waiting for all buffers to flush
2024-06-24 23:45:26 [43mdestination[0m > INFO main i.a.c.i.d.a.FlushWorkers(close):226 REMAINING_BUFFERS_INFO
  Namespace: raw Stream: ozon_sales -- remaining records: 1712
2024-06-24 23:45:26 [43mdestination[0m > INFO main i.a.c.i.d.a.FlushWorkers(close):227 Waiting for all streams to flush.
2024-06-24 23:45:27 [43mdestination[0m > INFO main i.a.c.i.d.a.FlushWorkers(close):226 REMAINING_BUFFERS_INFO
  Namespace: raw Stream: ozon_sales -- remaining records: 1712
2024-06-24 23:45:27 [43mdestination[0m > INFO main i.a.c.i.d.a.FlushWorkers(close):227 Waiting for all streams to flush.
2024-06-24 23:45:28 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.s.GlobalAsyncStateManager(flushStates):155 Flushing states
2024-06-24 23:45:28 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.s.GlobalAsyncStateManager(flushStates):209 Flushing states complete
2024-06-24 23:45:28 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.GlobalMemoryManager(free):78 Freeing 0 bytes..
2024-06-24 23:45:28 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.GlobalMemoryManager(free):78 Freeing 26214217 bytes..
2024-06-24 23:45:28 [43mdestination[0m > INFO pool-4-thread-2 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):170 Flush Worker (2e5f9) -- Worker finished flushing. Current queue size: 1712
2024-06-24 23:45:28 [43mdestination[0m > INFO main i.a.c.i.d.a.FlushWorkers(close):226 REMAINING_BUFFERS_INFO
  Namespace: raw Stream: ozon_sales -- remaining records: 1712
2024-06-24 23:45:28 [43mdestination[0m > INFO main i.a.c.i.d.a.FlushWorkers(close):227 Waiting for all streams to flush.
2024-06-24 23:45:29 [43mdestination[0m > INFO pool-5-thread-1 i.a.c.i.d.a.DetectStreamToFlush(getNextStreamToFlush):109 flushing: trigger info: raw - ozon_sales, time trigger: false , size trigger: true current threshold b: 0 bytes, queue size b: 1.88 MB, penalty b: 0 bytes, after penalty b: 1.88 MB
2024-06-24 23:45:29 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):135 Flush Worker (e26f7) -- Worker picked up work.
2024-06-24 23:45:29 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):141 Flush Worker (e26f7) -- Attempting to read from queue namespace: raw, stream: ozon_sales.
2024-06-24 23:45:29 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.GlobalMemoryManager(free):78 Freeing 8513874 bytes..
2024-06-24 23:45:29 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):159 Flush Worker (e26f7) -- Batch contains: 1712 records, 1.88 MB bytes.
2024-06-24 23:45:29 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.s.GlobalAsyncStateManager(flushStates):155 Flushing states
2024-06-24 23:45:29 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.s.GlobalAsyncStateManager(flushStates):209 Flushing states complete
2024-06-24 23:45:29 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.GlobalMemoryManager(free):78 Freeing 0 bytes..
2024-06-24 23:45:29 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.GlobalMemoryManager(free):78 Freeing 1974704 bytes..
2024-06-24 23:45:29 [43mdestination[0m > INFO pool-4-thread-1 i.a.c.i.d.a.FlushWorkers(flush$lambda$6):170 Flush Worker (e26f7) -- Worker finished flushing. Current queue size: 0
2024-06-24 23:45:29 [43mdestination[0m > INFO main i.a.c.i.d.a.FlushWorkers(close):230 Closing flush workers -- all buffers flushed
2024-06-24 23:45:29 [43mdestination[0m > INFO main i.a.c.i.d.a.s.GlobalAsyncStateManager(flushStates):155 Flushing states
2024-06-24 23:45:29 [43mdestination[0m > INFO main i.a.c.i.d.a.s.GlobalAsyncStateManager(flushStates):209 Flushing states complete
2024-06-24 23:45:29 [43mdestination[0m > INFO main i.a.c.i.d.a.GlobalMemoryManager(free):78 Freeing 0 bytes..
2024-06-24 23:45:29 [43mdestination[0m > INFO main i.a.c.i.d.a.FlushWorkers(close):238 Closing flush workers -- supervisor shut down
2024-06-24 23:45:29 [43mdestination[0m > INFO main i.a.c.i.d.a.FlushWorkers(close):240 Closing flush workers -- Starting worker pool shutdown..
2024-06-24 23:45:29 [43mdestination[0m > INFO main i.a.c.i.d.a.FlushWorkers(close):245 Closing flush workers  -- workers shut down
2024-06-24 23:45:29 [43mdestination[0m > INFO main i.a.c.i.d.a.b.BufferManager(close):68 Buffers cleared..
2024-06-24 23:45:29 [43mdestination[0m > INFO main i.a.i.b.d.t.DefaultTyperDeduper(typeAndDedupe):281 Typing and deduping all tables
2024-06-24 23:45:29 [43mdestination[0m > INFO type-and-dedupe i.a.i.b.d.t.TyperDeduperUtil(executeTypeAndDedupe):212 Attempting typing and deduping for raw.ozon_sales with suffix _airbyte_tmp
2024-06-24 23:45:30 [43mdestination[0m > INFO type-and-dedupe i.a.c.i.d.j.t.JdbcDestinationHandler(execute):163 Executing sql e12ddf90-723a-4a1f-852d-d0244af46c99-f07262af-08f1-47ab-987e-8a45358eabc5: [insert into "raw"."ozon_sales_airbyte_tmp" ("SKU", "URL", "Name", "Brand", "Photo", "Price", "Sales", "Rating", "Seller", "Balance", "Revenue", "Category", "Comments", "Max_price", "Min_price", "Lost_profit", "Unnamed__22", "Average_price", "Days_in_stock", "full_category", "Deliveryscheme", "Days_with_sales", "Revenue_potential", "Average_if_in_stock", "_airbyte_raw_id", "_airbyte_extracted_at", "_airbyte_meta") with "intermediate_data" as (select cast(case when ("_airbyte_data" -> 'SKU' is null or JSONB_TYPEOF("_airbyte_data" -> 'SKU') = 'null') then null else cast("_airbyte_data" -> 'SKU' as varchar) end as decimal(38, 9)) as "SKU", "_airbyte_data" -> 'URL' #>> '{}' as "URL", "_airbyte_data" -> 'Name' #>> '{}' as "Name", "_airbyte_data" -> 'Brand' #>> '{}' as "Brand", "_airbyte_data" -> 'Photo' #>> '{}' as "Photo", cast(case when ("_airbyte_data" -> 'Price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Price') = 'null') then null else cast("_airbyte_data" -> 'Price' as varchar) end as decimal(38, 9)) as "Price", cast(case when ("_airbyte_data" -> 'Sales' is null or JSONB_TYPEOF("_airbyte_data" -> 'Sales') = 'null') then null else cast("_airbyte_data" -> 'Sales' as varchar) end as decimal(38, 9)) as "Sales", "_airbyte_data" -> 'Rating' #>> '{}' as "Rating", "_airbyte_data" -> 'Seller' #>> '{}' as "Seller", cast(case when ("_airbyte_data" -> 'Balance' is null or JSONB_TYPEOF("_airbyte_data" -> 'Balance') = 'null') then null else cast("_airbyte_data" -> 'Balance' as varchar) end as decimal(38, 9)) as "Balance", cast(case when ("_airbyte_data" -> 'Revenue' is null or JSONB_TYPEOF("_airbyte_data" -> 'Revenue') = 'null') then null else cast("_airbyte_data" -> 'Revenue' as varchar) end as decimal(38, 9)) as "Revenue", "_airbyte_data" -> 'Category' #>> '{}' as "Category", cast(case when ("_airbyte_data" -> 'Comments' is null or JSONB_TYPEOF("_airbyte_data" -> 'Comments') = 'null') then null else cast("_airbyte_data" -> 'Comments' as varchar) end as decimal(38, 9)) as "Comments", cast(case when ("_airbyte_data" -> 'Max price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Max price') = 'null') then null else cast("_airbyte_data" -> 'Max price' as varchar) end as decimal(38, 9)) as "Max_price", cast(case when ("_airbyte_data" -> 'Min price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Min price') = 'null') then null else cast("_airbyte_data" -> 'Min price' as varchar) end as decimal(38, 9)) as "Min_price", cast(case when ("_airbyte_data" -> 'Lost profit' is null or JSONB_TYPEOF("_airbyte_data" -> 'Lost profit') = 'null') then null else cast("_airbyte_data" -> 'Lost profit' as varchar) end as decimal(38, 9)) as "Lost_profit", cast(case when ("_airbyte_data" -> 'Unnamed: 22' is null or JSONB_TYPEOF("_airbyte_data" -> 'Unnamed: 22') = 'null') then null else cast("_airbyte_data" -> 'Unnamed: 22' as varchar) end as decimal(38, 9)) as "Unnamed__22", cast(case when ("_airbyte_data" -> 'Average price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Average price') = 'null') then null else cast("_airbyte_data" -> 'Average price' as varchar) end as decimal(38, 9)) as "Average_price", cast(case when ("_airbyte_data" -> 'Days in stock' is null or JSONB_TYPEOF("_airbyte_data" -> 'Days in stock') = 'null') then null else cast("_airbyte_data" -> 'Days in stock' as varchar) end as decimal(38, 9)) as "Days_in_stock", "_airbyte_data" -> 'full_category' #>> '{}' as "full_category", "_airbyte_data" -> 'Deliveryscheme' #>> '{}' as "Deliveryscheme", cast(case when ("_airbyte_data" -> 'Days with sales' is null or JSONB_TYPEOF("_airbyte_data" -> 'Days with sales') = 'null') then null else cast("_airbyte_data" -> 'Days with sales' as varchar) end as decimal(38, 9)) as "Days_with_sales", cast(case when ("_airbyte_data" -> 'Revenue potential' is null or JSONB_TYPEOF("_airbyte_data" -> 'Revenue potential') = 'null') then null else cast("_airbyte_data" -> 'Revenue potential' as varchar) end as decimal(38, 9)) as "Revenue_potential", cast(case when ("_airbyte_data" -> 'Average if in stock' is null or JSONB_TYPEOF("_airbyte_data" -> 'Average if in stock') = 'null') then null else cast("_airbyte_data" -> 'Average if in stock' as varchar) end as decimal(38, 9)) as "Average_if_in_stock", "_airbyte_raw_id", "_airbyte_extracted_at", JSONB_BUILD_OBJECT('changes', ARRAY_CAT(ARRAY_REMOVE(cast(array[CASE WHEN ("_airbyte_data" -> 'SKU' is not null and JSONB_TYPEOF("_airbyte_data" -> 'SKU') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'SKU' is null or JSONB_TYPEOF("_airbyte_data" -> 'SKU') = 'null') then null else cast("_airbyte_data" -> 'SKU' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'SKU', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , cast(null as jsonb), cast(null as jsonb), cast(null as jsonb), cast(null as jsonb), CASE WHEN ("_airbyte_data" -> 'Price' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Price') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Price') = 'null') then null else cast("_airbyte_data" -> 'Price' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Price', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Sales' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Sales') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Sales' is null or JSONB_TYPEOF("_airbyte_data" -> 'Sales') = 'null') then null else cast("_airbyte_data" -> 'Sales' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Sales', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , cast(null as jsonb), cast(null as jsonb), CASE WHEN ("_airbyte_data" -> 'Balance' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Balance') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Balance' is null or JSONB_TYPEOF("_airbyte_data" -> 'Balance') = 'null') then null else cast("_airbyte_data" -> 'Balance' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Balance', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Revenue' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Revenue') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Revenue' is null or JSONB_TYPEOF("_airbyte_data" -> 'Revenue') = 'null') then null else cast("_airbyte_data" -> 'Revenue' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Revenue', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , cast(null as jsonb), CASE WHEN ("_airbyte_data" -> 'Comments' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Comments') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Comments' is null or JSONB_TYPEOF("_airbyte_data" -> 'Comments') = 'null') then null else cast("_airbyte_data" -> 'Comments' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Comments', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Max price' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Max price') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Max price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Max price') = 'null') then null else cast("_airbyte_data" -> 'Max price' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Max price', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Min price' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Min price') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Min price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Min price') = 'null') then null else cast("_airbyte_data" -> 'Min price' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Min price', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Lost profit' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Lost profit') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Lost profit' is null or JSONB_TYPEOF("_airbyte_data" -> 'Lost profit') = 'null') then null else cast("_airbyte_data" -> 'Lost profit' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Lost profit', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Unnamed: 22' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Unnamed: 22') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Unnamed: 22' is null or JSONB_TYPEOF("_airbyte_data" -> 'Unnamed: 22') = 'null') then null else cast("_airbyte_data" -> 'Unnamed: 22' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Unnamed: 22', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Average price' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Average price') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Average price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Average price') = 'null') then null else cast("_airbyte_data" -> 'Average price' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Average price', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Days in stock' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Days in stock') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Days in stock' is null or JSONB_TYPEOF("_airbyte_data" -> 'Days in stock') = 'null') then null else cast("_airbyte_data" -> 'Days in stock' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Days in stock', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , cast(null as jsonb), cast(null as jsonb), CASE WHEN ("_airbyte_data" -> 'Days with sales' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Days with sales') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Days with sales' is null or JSONB_TYPEOF("_airbyte_data" -> 'Days with sales') = 'null') then null else cast("_airbyte_data" -> 'Days with sales' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Days with sales', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Revenue potential' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Revenue potential') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Revenue potential' is null or JSONB_TYPEOF("_airbyte_data" -> 'Revenue potential') = 'null') then null else cast("_airbyte_data" -> 'Revenue potential' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Revenue potential', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Average if in stock' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Average if in stock') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Average if in stock' is null or JSONB_TYPEOF("_airbyte_data" -> 'Average if in stock') = 'null') then null else cast("_airbyte_data" -> 'Average if in stock' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Average if in stock', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END ] as jsonb[]), null), ARRAY(SELECT jsonb_array_elements_text("_airbyte_meta"#>'{changes}'))::jsonb[])) as "_airbyte_meta" from "airbyte_internal"."raw_raw__stream_ozon_sales" where ("_airbyte_loaded_at" is null and "_airbyte_extracted_at" > '2024-06-24T19:29:02Z')) select "SKU", "URL", "Name", "Brand", "Photo", "Price", "Sales", "Rating", "Seller", "Balance", "Revenue", "Category", "Comments", "Max_price", "Min_price", "Lost_profit", "Unnamed__22", "Average_price", "Days_in_stock", "full_category", "Deliveryscheme", "Days_with_sales", "Revenue_potential", "Average_if_in_stock", "_airbyte_raw_id", "_airbyte_extracted_at", "_airbyte_meta" from "intermediate_data";, update "airbyte_internal"."raw_raw__stream_ozon_sales" set "_airbyte_loaded_at" = current_timestamp where ("_airbyte_loaded_at" is null and "_airbyte_extracted_at" > '2024-06-24T19:29:02Z');]
2024-06-24 23:45:30 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):46 executing query within transaction: insert into "raw"."ozon_sales_airbyte_tmp" ("SKU", "URL", "Name", "Brand", "Photo", "Price", "Sales", "Rating", "Seller", "Balance", "Revenue", "Category", "Comments", "Max_price", "Min_price", "Lost_profit", "Unnamed__22", "Average_price", "Days_in_stock", "full_category", "Deliveryscheme", "Days_with_sales", "Revenue_potential", "Average_if_in_stock", "_airbyte_raw_id", "_airbyte_extracted_at", "_airbyte_meta") with "intermediate_data" as (select cast(case when ("_airbyte_data" -> 'SKU' is null or JSONB_TYPEOF("_airbyte_data" -> 'SKU') = 'null') then null else cast("_airbyte_data" -> 'SKU' as varchar) end as decimal(38, 9)) as "SKU", "_airbyte_data" -> 'URL' #>> '{}' as "URL", "_airbyte_data" -> 'Name' #>> '{}' as "Name", "_airbyte_data" -> 'Brand' #>> '{}' as "Brand", "_airbyte_data" -> 'Photo' #>> '{}' as "Photo", cast(case when ("_airbyte_data" -> 'Price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Price') = 'null') then null else cast("_airbyte_data" -> 'Price' as varchar) end as decimal(38, 9)) as "Price", cast(case when ("_airbyte_data" -> 'Sales' is null or JSONB_TYPEOF("_airbyte_data" -> 'Sales') = 'null') then null else cast("_airbyte_data" -> 'Sales' as varchar) end as decimal(38, 9)) as "Sales", "_airbyte_data" -> 'Rating' #>> '{}' as "Rating", "_airbyte_data" -> 'Seller' #>> '{}' as "Seller", cast(case when ("_airbyte_data" -> 'Balance' is null or JSONB_TYPEOF("_airbyte_data" -> 'Balance') = 'null') then null else cast("_airbyte_data" -> 'Balance' as varchar) end as decimal(38, 9)) as "Balance", cast(case when ("_airbyte_data" -> 'Revenue' is null or JSONB_TYPEOF("_airbyte_data" -> 'Revenue') = 'null') then null else cast("_airbyte_data" -> 'Revenue' as varchar) end as decimal(38, 9)) as "Revenue", "_airbyte_data" -> 'Category' #>> '{}' as "Category", cast(case when ("_airbyte_data" -> 'Comments' is null or JSONB_TYPEOF("_airbyte_data" -> 'Comments') = 'null') then null else cast("_airbyte_data" -> 'Comments' as varchar) end as decimal(38, 9)) as "Comments", cast(case when ("_airbyte_data" -> 'Max price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Max price') = 'null') then null else cast("_airbyte_data" -> 'Max price' as varchar) end as decimal(38, 9)) as "Max_price", cast(case when ("_airbyte_data" -> 'Min price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Min price') = 'null') then null else cast("_airbyte_data" -> 'Min price' as varchar) end as decimal(38, 9)) as "Min_price", cast(case when ("_airbyte_data" -> 'Lost profit' is null or JSONB_TYPEOF("_airbyte_data" -> 'Lost profit') = 'null') then null else cast("_airbyte_data" -> 'Lost profit' as varchar) end as decimal(38, 9)) as "Lost_profit", cast(case when ("_airbyte_data" -> 'Unnamed: 22' is null or JSONB_TYPEOF("_airbyte_data" -> 'Unnamed: 22') = 'null') then null else cast("_airbyte_data" -> 'Unnamed: 22' as varchar) end as decimal(38, 9)) as "Unnamed__22", cast(case when ("_airbyte_data" -> 'Average price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Average price') = 'null') then null else cast("_airbyte_data" -> 'Average price' as varchar) end as decimal(38, 9)) as "Average_price", cast(case when ("_airbyte_data" -> 'Days in stock' is null or JSONB_TYPEOF("_airbyte_data" -> 'Days in stock') = 'null') then null else cast("_airbyte_data" -> 'Days in stock' as varchar) end as decimal(38, 9)) as "Days_in_stock", "_airbyte_data" -> 'full_category' #>> '{}' as "full_category", "_airbyte_data" -> 'Deliveryscheme' #>> '{}' as "Deliveryscheme", cast(case when ("_airbyte_data" -> 'Days with sales' is null or JSONB_TYPEOF("_airbyte_data" -> 'Days with sales') = 'null') then null else cast("_airbyte_data" -> 'Days with sales' as varchar) end as decimal(38, 9)) as "Days_with_sales", cast(case when ("_airbyte_data" -> 'Revenue potential' is null or JSONB_TYPEOF("_airbyte_data" -> 'Revenue potential') = 'null') then null else cast("_airbyte_data" -> 'Revenue potential' as varchar) end as decimal(38, 9)) as "Revenue_potential", cast(case when ("_airbyte_data" -> 'Average if in stock' is null or JSONB_TYPEOF("_airbyte_data" -> 'Average if in stock') = 'null') then null else cast("_airbyte_data" -> 'Average if in stock' as varchar) end as decimal(38, 9)) as "Average_if_in_stock", "_airbyte_raw_id", "_airbyte_extracted_at", JSONB_BUILD_OBJECT('changes', ARRAY_CAT(ARRAY_REMOVE(cast(array[CASE WHEN ("_airbyte_data" -> 'SKU' is not null and JSONB_TYPEOF("_airbyte_data" -> 'SKU') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'SKU' is null or JSONB_TYPEOF("_airbyte_data" -> 'SKU') = 'null') then null else cast("_airbyte_data" -> 'SKU' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'SKU', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , cast(null as jsonb), cast(null as jsonb), cast(null as jsonb), cast(null as jsonb), CASE WHEN ("_airbyte_data" -> 'Price' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Price') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Price') = 'null') then null else cast("_airbyte_data" -> 'Price' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Price', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Sales' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Sales') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Sales' is null or JSONB_TYPEOF("_airbyte_data" -> 'Sales') = 'null') then null else cast("_airbyte_data" -> 'Sales' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Sales', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , cast(null as jsonb), cast(null as jsonb), CASE WHEN ("_airbyte_data" -> 'Balance' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Balance') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Balance' is null or JSONB_TYPEOF("_airbyte_data" -> 'Balance') = 'null') then null else cast("_airbyte_data" -> 'Balance' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Balance', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Revenue' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Revenue') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Revenue' is null or JSONB_TYPEOF("_airbyte_data" -> 'Revenue') = 'null') then null else cast("_airbyte_data" -> 'Revenue' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Revenue', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , cast(null as jsonb), CASE WHEN ("_airbyte_data" -> 'Comments' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Comments') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Comments' is null or JSONB_TYPEOF("_airbyte_data" -> 'Comments') = 'null') then null else cast("_airbyte_data" -> 'Comments' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Comments', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Max price' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Max price') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Max price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Max price') = 'null') then null else cast("_airbyte_data" -> 'Max price' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Max price', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Min price' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Min price') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Min price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Min price') = 'null') then null else cast("_airbyte_data" -> 'Min price' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Min price', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Lost profit' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Lost profit') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Lost profit' is null or JSONB_TYPEOF("_airbyte_data" -> 'Lost profit') = 'null') then null else cast("_airbyte_data" -> 'Lost profit' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Lost profit', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Unnamed: 22' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Unnamed: 22') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Unnamed: 22' is null or JSONB_TYPEOF("_airbyte_data" -> 'Unnamed: 22') = 'null') then null else cast("_airbyte_data" -> 'Unnamed: 22' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Unnamed: 22', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Average price' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Average price') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Average price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Average price') = 'null') then null else cast("_airbyte_data" -> 'Average price' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Average price', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Days in stock' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Days in stock') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Days in stock' is null or JSONB_TYPEOF("_airbyte_data" -> 'Days in stock') = 'null') then null else cast("_airbyte_data" -> 'Days in stock' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Days in stock', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , cast(null as jsonb), cast(null as jsonb), CASE WHEN ("_airbyte_data" -> 'Days with sales' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Days with sales') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Days with sales' is null or JSONB_TYPEOF("_airbyte_data" -> 'Days with sales') = 'null') then null else cast("_airbyte_data" -> 'Days with sales' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Days with sales', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Revenue potential' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Revenue potential') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Revenue potential' is null or JSONB_TYPEOF("_airbyte_data" -> 'Revenue potential') = 'null') then null else cast("_airbyte_data" -> 'Revenue potential' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Revenue potential', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Average if in stock' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Average if in stock') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Average if in stock' is null or JSONB_TYPEOF("_airbyte_data" -> 'Average if in stock') = 'null') then null else cast("_airbyte_data" -> 'Average if in stock' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Average if in stock', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END ] as jsonb[]), null), ARRAY(SELECT jsonb_array_elements_text("_airbyte_meta"#>'{changes}'))::jsonb[])) as "_airbyte_meta" from "airbyte_internal"."raw_raw__stream_ozon_sales" where ("_airbyte_loaded_at" is null and "_airbyte_extracted_at" > '2024-06-24T19:29:02Z')) select "SKU", "URL", "Name", "Brand", "Photo", "Price", "Sales", "Rating", "Seller", "Balance", "Revenue", "Category", "Comments", "Max_price", "Min_price", "Lost_profit", "Unnamed__22", "Average_price", "Days_in_stock", "full_category", "Deliveryscheme", "Days_with_sales", "Revenue_potential", "Average_if_in_stock", "_airbyte_raw_id", "_airbyte_extracted_at", "_airbyte_meta" from "intermediate_data";
2024-06-24 23:45:53 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):48 done executing query within transaction: insert into "raw"."ozon_sales_airbyte_tmp" ("SKU", "URL", "Name", "Brand", "Photo", "Price", "Sales", "Rating", "Seller", "Balance", "Revenue", "Category", "Comments", "Max_price", "Min_price", "Lost_profit", "Unnamed__22", "Average_price", "Days_in_stock", "full_category", "Deliveryscheme", "Days_with_sales", "Revenue_potential", "Average_if_in_stock", "_airbyte_raw_id", "_airbyte_extracted_at", "_airbyte_meta") with "intermediate_data" as (select cast(case when ("_airbyte_data" -> 'SKU' is null or JSONB_TYPEOF("_airbyte_data" -> 'SKU') = 'null') then null else cast("_airbyte_data" -> 'SKU' as varchar) end as decimal(38, 9)) as "SKU", "_airbyte_data" -> 'URL' #>> '{}' as "URL", "_airbyte_data" -> 'Name' #>> '{}' as "Name", "_airbyte_data" -> 'Brand' #>> '{}' as "Brand", "_airbyte_data" -> 'Photo' #>> '{}' as "Photo", cast(case when ("_airbyte_data" -> 'Price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Price') = 'null') then null else cast("_airbyte_data" -> 'Price' as varchar) end as decimal(38, 9)) as "Price", cast(case when ("_airbyte_data" -> 'Sales' is null or JSONB_TYPEOF("_airbyte_data" -> 'Sales') = 'null') then null else cast("_airbyte_data" -> 'Sales' as varchar) end as decimal(38, 9)) as "Sales", "_airbyte_data" -> 'Rating' #>> '{}' as "Rating", "_airbyte_data" -> 'Seller' #>> '{}' as "Seller", cast(case when ("_airbyte_data" -> 'Balance' is null or JSONB_TYPEOF("_airbyte_data" -> 'Balance') = 'null') then null else cast("_airbyte_data" -> 'Balance' as varchar) end as decimal(38, 9)) as "Balance", cast(case when ("_airbyte_data" -> 'Revenue' is null or JSONB_TYPEOF("_airbyte_data" -> 'Revenue') = 'null') then null else cast("_airbyte_data" -> 'Revenue' as varchar) end as decimal(38, 9)) as "Revenue", "_airbyte_data" -> 'Category' #>> '{}' as "Category", cast(case when ("_airbyte_data" -> 'Comments' is null or JSONB_TYPEOF("_airbyte_data" -> 'Comments') = 'null') then null else cast("_airbyte_data" -> 'Comments' as varchar) end as decimal(38, 9)) as "Comments", cast(case when ("_airbyte_data" -> 'Max price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Max price') = 'null') then null else cast("_airbyte_data" -> 'Max price' as varchar) end as decimal(38, 9)) as "Max_price", cast(case when ("_airbyte_data" -> 'Min price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Min price') = 'null') then null else cast("_airbyte_data" -> 'Min price' as varchar) end as decimal(38, 9)) as "Min_price", cast(case when ("_airbyte_data" -> 'Lost profit' is null or JSONB_TYPEOF("_airbyte_data" -> 'Lost profit') = 'null') then null else cast("_airbyte_data" -> 'Lost profit' as varchar) end as decimal(38, 9)) as "Lost_profit", cast(case when ("_airbyte_data" -> 'Unnamed: 22' is null or JSONB_TYPEOF("_airbyte_data" -> 'Unnamed: 22') = 'null') then null else cast("_airbyte_data" -> 'Unnamed: 22' as varchar) end as decimal(38, 9)) as "Unnamed__22", cast(case when ("_airbyte_data" -> 'Average price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Average price') = 'null') then null else cast("_airbyte_data" -> 'Average price' as varchar) end as decimal(38, 9)) as "Average_price", cast(case when ("_airbyte_data" -> 'Days in stock' is null or JSONB_TYPEOF("_airbyte_data" -> 'Days in stock') = 'null') then null else cast("_airbyte_data" -> 'Days in stock' as varchar) end as decimal(38, 9)) as "Days_in_stock", "_airbyte_data" -> 'full_category' #>> '{}' as "full_category", "_airbyte_data" -> 'Deliveryscheme' #>> '{}' as "Deliveryscheme", cast(case when ("_airbyte_data" -> 'Days with sales' is null or JSONB_TYPEOF("_airbyte_data" -> 'Days with sales') = 'null') then null else cast("_airbyte_data" -> 'Days with sales' as varchar) end as decimal(38, 9)) as "Days_with_sales", cast(case when ("_airbyte_data" -> 'Revenue potential' is null or JSONB_TYPEOF("_airbyte_data" -> 'Revenue potential') = 'null') then null else cast("_airbyte_data" -> 'Revenue potential' as varchar) end as decimal(38, 9)) as "Revenue_potential", cast(case when ("_airbyte_data" -> 'Average if in stock' is null or JSONB_TYPEOF("_airbyte_data" -> 'Average if in stock') = 'null') then null else cast("_airbyte_data" -> 'Average if in stock' as varchar) end as decimal(38, 9)) as "Average_if_in_stock", "_airbyte_raw_id", "_airbyte_extracted_at", JSONB_BUILD_OBJECT('changes', ARRAY_CAT(ARRAY_REMOVE(cast(array[CASE WHEN ("_airbyte_data" -> 'SKU' is not null and JSONB_TYPEOF("_airbyte_data" -> 'SKU') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'SKU' is null or JSONB_TYPEOF("_airbyte_data" -> 'SKU') = 'null') then null else cast("_airbyte_data" -> 'SKU' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'SKU', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , cast(null as jsonb), cast(null as jsonb), cast(null as jsonb), cast(null as jsonb), CASE WHEN ("_airbyte_data" -> 'Price' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Price') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Price') = 'null') then null else cast("_airbyte_data" -> 'Price' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Price', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Sales' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Sales') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Sales' is null or JSONB_TYPEOF("_airbyte_data" -> 'Sales') = 'null') then null else cast("_airbyte_data" -> 'Sales' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Sales', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , cast(null as jsonb), cast(null as jsonb), CASE WHEN ("_airbyte_data" -> 'Balance' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Balance') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Balance' is null or JSONB_TYPEOF("_airbyte_data" -> 'Balance') = 'null') then null else cast("_airbyte_data" -> 'Balance' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Balance', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Revenue' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Revenue') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Revenue' is null or JSONB_TYPEOF("_airbyte_data" -> 'Revenue') = 'null') then null else cast("_airbyte_data" -> 'Revenue' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Revenue', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , cast(null as jsonb), CASE WHEN ("_airbyte_data" -> 'Comments' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Comments') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Comments' is null or JSONB_TYPEOF("_airbyte_data" -> 'Comments') = 'null') then null else cast("_airbyte_data" -> 'Comments' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Comments', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Max price' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Max price') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Max price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Max price') = 'null') then null else cast("_airbyte_data" -> 'Max price' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Max price', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Min price' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Min price') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Min price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Min price') = 'null') then null else cast("_airbyte_data" -> 'Min price' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Min price', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Lost profit' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Lost profit') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Lost profit' is null or JSONB_TYPEOF("_airbyte_data" -> 'Lost profit') = 'null') then null else cast("_airbyte_data" -> 'Lost profit' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Lost profit', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Unnamed: 22' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Unnamed: 22') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Unnamed: 22' is null or JSONB_TYPEOF("_airbyte_data" -> 'Unnamed: 22') = 'null') then null else cast("_airbyte_data" -> 'Unnamed: 22' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Unnamed: 22', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Average price' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Average price') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Average price' is null or JSONB_TYPEOF("_airbyte_data" -> 'Average price') = 'null') then null else cast("_airbyte_data" -> 'Average price' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Average price', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Days in stock' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Days in stock') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Days in stock' is null or JSONB_TYPEOF("_airbyte_data" -> 'Days in stock') = 'null') then null else cast("_airbyte_data" -> 'Days in stock' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Days in stock', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , cast(null as jsonb), cast(null as jsonb), CASE WHEN ("_airbyte_data" -> 'Days with sales' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Days with sales') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Days with sales' is null or JSONB_TYPEOF("_airbyte_data" -> 'Days with sales') = 'null') then null else cast("_airbyte_data" -> 'Days with sales' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Days with sales', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Revenue potential' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Revenue potential') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Revenue potential' is null or JSONB_TYPEOF("_airbyte_data" -> 'Revenue potential') = 'null') then null else cast("_airbyte_data" -> 'Revenue potential' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Revenue potential', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END , CASE WHEN ("_airbyte_data" -> 'Average if in stock' is not null and JSONB_TYPEOF("_airbyte_data" -> 'Average if in stock') <> 'null' and "pg_temp"."airbyte_safe_cast"(case when ("_airbyte_data" -> 'Average if in stock' is null or JSONB_TYPEOF("_airbyte_data" -> 'Average if in stock') = 'null') then null else cast("_airbyte_data" -> 'Average if in stock' as varchar) end, cast(null as decimal(38, 9))) is null) THEN JSONB_BUILD_OBJECT('field', 'Average if in stock', 'change', 'NULLED', 'reason', 'DESTINATION_TYPECAST_ERROR') ELSE cast(null as jsonb) END ] as jsonb[]), null), ARRAY(SELECT jsonb_array_elements_text("_airbyte_meta"#>'{changes}'))::jsonb[])) as "_airbyte_meta" from "airbyte_internal"."raw_raw__stream_ozon_sales" where ("_airbyte_loaded_at" is null and "_airbyte_extracted_at" > '2024-06-24T19:29:02Z')) select "SKU", "URL", "Name", "Brand", "Photo", "Price", "Sales", "Rating", "Seller", "Balance", "Revenue", "Category", "Comments", "Max_price", "Min_price", "Lost_profit", "Unnamed__22", "Average_price", "Days_in_stock", "full_category", "Deliveryscheme", "Days_with_sales", "Revenue_potential", "Average_if_in_stock", "_airbyte_raw_id", "_airbyte_extracted_at", "_airbyte_meta" from "intermediate_data";
2024-06-24 23:45:53 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):46 executing query within transaction: update "airbyte_internal"."raw_raw__stream_ozon_sales" set "_airbyte_loaded_at" = current_timestamp where ("_airbyte_loaded_at" is null and "_airbyte_extracted_at" > '2024-06-24T19:29:02Z');
2024-06-24 23:46:11 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):48 done executing query within transaction: update "airbyte_internal"."raw_raw__stream_ozon_sales" set "_airbyte_loaded_at" = current_timestamp where ("_airbyte_loaded_at" is null and "_airbyte_extracted_at" > '2024-06-24T19:29:02Z');
2024-06-24 23:46:11 [43mdestination[0m > INFO type-and-dedupe i.a.c.i.d.j.t.JdbcDestinationHandler(execute):175 Sql e12ddf90-723a-4a1f-852d-d0244af46c99-f07262af-08f1-47ab-987e-8a45358eabc5 completed in 41767 ms
2024-06-24 23:46:11 [43mdestination[0m > INFO main i.a.i.b.d.t.DefaultTyperDeduper(commitFinalTables):334 Committing final tables
2024-06-24 23:46:11 [43mdestination[0m > INFO type-and-dedupe i.a.i.b.d.t.DefaultTyperDeduper(commitFinalTableTask$lambda$9):369 Overwriting final table with tmp table for stream raw.ozon_sales
2024-06-24 23:46:11 [43mdestination[0m > INFO type-and-dedupe i.a.c.i.d.j.t.JdbcDestinationHandler(execute):163 Executing sql a083b8a5-ccb4-42e5-8f20-09cf7705d5bd-8be86255-6c58-40a5-af0d-9c2bc5c5155b: [drop table if exists "raw"."ozon_sales";, alter table "raw"."ozon_sales_airbyte_tmp" rename to "ozon_sales";]
2024-06-24 23:46:11 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):46 executing query within transaction: drop table if exists "raw"."ozon_sales";
2024-06-24 23:46:11 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):48 done executing query within transaction: drop table if exists "raw"."ozon_sales";
2024-06-24 23:46:11 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):46 executing query within transaction: alter table "raw"."ozon_sales_airbyte_tmp" rename to "ozon_sales";
2024-06-24 23:46:11 [43mdestination[0m > INFO type-and-dedupe i.a.c.d.j.JdbcDatabase(executeWithinTransaction$lambda$1):48 done executing query within transaction: alter table "raw"."ozon_sales_airbyte_tmp" rename to "ozon_sales";
2024-06-24 23:46:11 [43mdestination[0m > INFO type-and-dedupe i.a.c.i.d.j.t.JdbcDestinationHandler(execute):175 Sql a083b8a5-ccb4-42e5-8f20-09cf7705d5bd-8be86255-6c58-40a5-af0d-9c2bc5c5155b completed in 76 ms
2024-06-24 23:46:11 [43mdestination[0m > INFO main i.a.i.b.d.t.DefaultTyperDeduper(cleanup):393 Cleaning Up type-and-dedupe thread pool
2024-06-24 23:46:11 [43mdestination[0m > INFO main i.a.c.i.d.a.AsyncStreamConsumer(close):171 class io.airbyte.cdk.integrations.destination.async.AsyncStreamConsumer closed
2024-06-24 23:46:11 [43mdestination[0m > INFO main i.a.c.i.b.IntegrationRunner(runInternal):267 Completed integration: io.airbyte.cdk.integrations.base.ssh.SshWrappedDestination
2024-06-24 23:46:11 [43mdestination[0m > INFO main i.a.i.d.p.PostgresDestination$Companion(main):212 completed destination: class io.airbyte.integrations.destination.postgres.PostgresDestination
2024-06-24 23:46:12 [46mplatform[0m > readFromDestination: done. (writeToDestFailed:false, dest.isFinished:true)
2024-06-24 23:46:12 [46mplatform[0m > thread status... timeout thread: false , replication thread: true
2024-06-24 23:46:12 [46mplatform[0m > sync summary: {
  "status" : "completed",
  "recordsSynced" : 0,
  "bytesSynced" : 0,
  "startTime" : 1719272630548,
  "endTime" : 1719272772050,
  "totalStats" : {
    "bytesCommitted" : 70846809,
    "bytesEmitted" : 70846809,
    "destinationStateMessagesEmitted" : 0,
    "destinationWriteEndTime" : 1719272772040,
    "destinationWriteStartTime" : 1719272630552,
    "meanSecondsBeforeSourceStateMessageEmitted" : 0,
    "maxSecondsBeforeSourceStateMessageEmitted" : 0,
    "maxSecondsBetweenStateMessageEmittedandCommitted" : 0,
    "meanSecondsBetweenStateMessageEmittedandCommitted" : 0,
    "recordsEmitted" : 91556,
    "recordsCommitted" : 91556,
    "replicationEndTime" : 1719272772050,
    "replicationStartTime" : 1719272630548,
    "sourceReadEndTime" : 1719272726842,
    "sourceReadStartTime" : 1719272630552,
    "sourceStateMessagesEmitted" : 0
  },
  "streamStats" : [ {
    "streamName" : "ozon_sales",
    "stats" : {
      "bytesCommitted" : 70846809,
      "bytesEmitted" : 70846809,
      "recordsEmitted" : 91556,
      "recordsCommitted" : 91556
    }
  } ],
  "performanceMetrics" : {
    "processFromSource" : {
      "elapsedTimeInNanos" : 4937204362,
      "executionCount" : 91559,
      "avgExecTimeInNanos" : 53923.747113882855
    },
    "readFromSource" : {
      "elapsedTimeInNanos" : 95940165646,
      "executionCount" : 93684,
      "avgExecTimeInNanos" : 1024082.7211263396
    },
    "processFromDest" : {
      "elapsedTimeInNanos" : 0,
      "executionCount" : 0,
      "avgExecTimeInNanos" : "NaN"
    },
    "writeToDest" : {
      "elapsedTimeInNanos" : 5473447230,
      "executionCount" : 91556,
      "avgExecTimeInNanos" : 59782.50720870287
    },
    "readFromDest" : {
      "elapsedTimeInNanos" : 141407996974,
      "executionCount" : 265,
      "avgExecTimeInNanos" : 5.3361508292075473E8
    }
  }
}
2024-06-24 23:46:12 [46mplatform[0m > failures: [ ]
2024-06-24 23:46:12 [46mplatform[0m > 
2024-06-24 23:46:12 [46mplatform[0m > ----- END REPLICATION -----
2024-06-24 23:46:12 [46mplatform[0m > 
